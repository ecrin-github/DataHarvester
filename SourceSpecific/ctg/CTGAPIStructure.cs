//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


// 
// This source code was auto-generated by xsd, Version=4.8.3928.0.
// 

using System;
using System.Collections.Generic;
using System.Xml.Linq;

namespace DataHarvester.ctg
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]

    public partial class FullStudy
    {
        private StructType structField;

        private string rankField;

        /// <remarks/>
        public StructType Struct
        {
            get
            {
                return this.structField;
            }
            set
            {
                this.structField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string Rank
        {
            get
            {
                return this.rankField;
            }
            set
            {
                this.rankField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StructType
    {

        private object[] itemsField;

        private string nameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Field", typeof(FieldType))]
        [System.Xml.Serialization.XmlElementAttribute("List", typeof(ListType))]
        [System.Xml.Serialization.XmlElementAttribute("Struct", typeof(StructType))]
        public object[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FieldType
    {

        private string nameField;

        private string valueField;

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListType
    {

        private object[] itemsField;

        private string nameField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Field", typeof(FieldType))]
        [System.Xml.Serialization.XmlElementAttribute("List", typeof(ListType))]
        [System.Xml.Serialization.XmlElementAttribute("Struct", typeof(StructType))]
        public object[] Items
        {
            get
            {
                return this.itemsField;
            }
            set
            {
                this.itemsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }


    public class XmlHelpers
    {
        // All these used within CTG file processing


        public XElement RetrieveStruct(XElement container, string nameToMatch)
        {
            var Structs = container.Elements("Struct");
            foreach (XElement st in Structs)
            {
                if ((string)st.Attribute("Name") == nameToMatch)
                {
                    return st;
                }
            }
            return null;
        }


        public bool CheckStructExists(XElement container, string nameToMatch)
        {

            var Structs = container.Elements("Struct");
            foreach (XElement st in Structs)
            {
                if ((string)st.Attribute("Name") == nameToMatch)
                {
                    return true;
                }
            }
            return false;
        }


        public string FieldValue(XElement container, string nameToMatch)
        {
            var Fields = container.Elements("Field");
            foreach (XElement b in Fields)
            {
                if ((string)b.Attribute("Name") == nameToMatch)
                {
                    return (b == null) ? null : (string)b;
                }
            }
            return null;
        }


        public string StructFieldValue(XElement container, string structToMatch, string fieldToMatch)
        {
            var Structs = container.Elements("Struct");
            foreach (XElement st in Structs)
            {
                if ((string)st.Attribute("Name") == structToMatch)
                {
                    return FieldValue(st, fieldToMatch);
                }
            }
            return null;
        }


        public IEnumerable<XElement> RetrieveListElements(XElement container, string listToMatch)
        {
            var Lists = container.Elements("List");
            foreach (XElement li in Lists)
            {
                if ((string)li.Attribute("Name") == listToMatch)
                {
                    return li.Elements();
                }
            }
            return null;
        }


        // check name...
        public int CheckObjectName(List<ObjectTitle> titles, string object_display_title)
        {
            int num_of_this_type = 0;
            if (titles.Count > 0)
            {
                for (int j = 0; j < titles.Count; j++)
                {
                    if (titles[j].title_text.Contains(object_display_title))
                    {
                        num_of_this_type++;
                    }
                }
            }
            return num_of_this_type;
        }

        public string GetElementAsString(XElement e) => (e == null) ? null : (string)e;

        public string GetAttributeAsString(XAttribute a) => (a == null) ? null : (string)a;

        public int? GetElementAsInt(XElement e) => (e == null) ? null : (int?)e;

        public int? GetAttributeAsInt(XAttribute a) => (a == null) ? null : (int?)a;

        public bool GetAttributeAsBool(XAttribute a)
        {
            string avalue = GetAttributeAsString(a);
            if (avalue != null)
            {
                return (avalue.ToUpper() == "Y") ? true : false;
            }
            else
            {
                return false;
            }
        }
    }

}